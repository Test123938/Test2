# A workflow for publishing releases of the Wolfie2D GameEngine.
name: Publish

# Publishing can only be done manually. 
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release (SemVer)'     
        required: true
        default: 'vX.Y.Z'

# There are some things that need to happen before a release is published:
#
# 1. Check that the version is valid
# 2. Check that the CI tests pass
# 3. Publish the release version
jobs: 

  # Step 1 - Validate the Version
  Version:
    runs-on: ubuntu-latest
    steps:
      - name: Check Semantic Version
        run: |
          npm install semver
          npx semver ${{ inputs.version }}

  # Step 2 - Validate the CI tests
  CI:
    needs: Version
    uses: ./.github/workflows/ci.yml

  # Step 3 - Actually publish the release
  Release:
    runs-on: ubuntu-latest
    needs: CI
    
    steps:
      # Get whatever branch we're publishing to
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      # Configure github username - keep track of whoever is publishing
      - name: Config User and Email
        run: |
          git config user.name ${{ github.actor }} 

      # Create the download directory
      - name: Create Download Directory
        run: |
          mkdir Wolfie2D

      # Copies project files to the download folder
      - name: Copy Project Files
        run: |
          cp -r src Wolfie2D
          cp -r dist Wolfie2D
          cp .gitignore gulpfile.js package.json package-lock.json tsconfig.json Wolfie2D

      # Zip download folder and move to docs folder
      - name: Zip Download Folder
        run: |
          zip -r Wolfie2D.zip Wolfie2D

      # Add, commit, and push the download folder to main
      - name: Add, commit, push 
        run: |
          git add Wolfie2D.zip
          git commit -m "Generated download for Wolfie2D-${{ inputs.version }}"
          git push

      # Tag and push this release
      - name: Tag and Push
        run: |
          git fetch origin
          git tag ${{ inputs.version }}
          git push origin ${{ inputs.version }}
