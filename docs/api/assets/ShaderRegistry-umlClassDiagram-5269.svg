<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="544px" preserveAspectRatio="none" style="width:628px;height:544px;background:#00000000;" version="1.1" viewBox="0 0 628 544" width="628px" zoomAndPan="magnify"><defs><filter height="300%" id="f1hec2o81ik2cs" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[bc0008100b09d00eabbab68c5031d12a]
class ShaderRegistry--><rect codeLine="6" fill="#FEFECE" filter="url(#f1hec2o81ik2cs)" height="268.2363" id="ShaderRegistry" style="stroke:#FF0000;stroke-width:1.5;" width="607" x="7" y="262"/><ellipse cx="263.25" cy="278" fill="#ADD1B2" rx="11" ry="11" style="stroke:#FF0000;stroke-width:1.0;"/><path d="M265.7231,284.1431 Q265.1421,284.4419 264.5029,284.5913 Q263.8638,284.7407 263.1582,284.7407 Q260.6514,284.7407 259.3315,283.0889 Q258.0117,281.437 258.0117,278.3159 Q258.0117,275.1865 259.3315,273.5347 Q260.6514,271.8828 263.1582,271.8828 Q263.8638,271.8828 264.5112,272.0322 Q265.1587,272.1816 265.7231,272.4805 L265.7231,275.2031 Q265.0923,274.6221 264.4988,274.3523 Q263.9053,274.0825 263.2744,274.0825 Q261.9297,274.0825 261.2449,275.1492 Q260.5601,276.2158 260.5601,278.3159 Q260.5601,280.4077 261.2449,281.4744 Q261.9297,282.541 263.2744,282.541 Q263.9053,282.541 264.4988,282.2712 Q265.0923,282.0015 265.7231,281.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="86" x="283.75" y="282.5352">ShaderRegistry</text><line style="stroke:#FF0000;stroke-width:1.5;" x1="8" x2="613" y1="294" y2="294"/><ellipse cx="18" cy="305" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="122" x="27" y="308.6348">LABEL_SHADER : string</text><ellipse cx="18" cy="317.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="123" x="27" y="321.5898">POINT_SHADER : string</text><ellipse cx="18" cy="330.9102" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="118" x="27" y="334.5449">RECT_SHADER : string</text><ellipse cx="18" cy="343.8652" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="125" x="27" y="347.5">SPRITE_SHADER : string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="353.8203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="192" x="27" y="360.4551">registryItems : ShaderRegistryItem[]</text><line style="stroke:#FF0000;stroke-width:1.5;" x1="8" x2="613" y1="366.7754" y2="366.7754"/><ellipse cx="18" cy="377.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="219" x="27" y="381.4102">add(key: string, value: ShaderType) : void</text><ellipse cx="18" cy="390.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="66" x="27" y="394.3652">clear() : void</text><ellipse cx="18" cy="403.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="27" y="407.3203">delete(key: string) : void</text><ellipse cx="18" cy="416.6406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="158" x="27" y="420.2754">forEach(func: Function) : void</text><ellipse cx="18" cy="429.5957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="153" x="27" y="433.2305">get(key: string) : ShaderType</text><ellipse cx="18" cy="442.5508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="27" y="446.1855">has(key: string) : boolean</text><ellipse cx="18" cy="455.5059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="81" x="27" y="459.1406">keys() : string[]</text><ellipse cx="18" cy="468.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="81" x="27" y="472.0957">preload() : void</text><ellipse cx="18" cy="481.416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="581" x="27" y="485.0508">registerAndPreloadItem(key: string, constr: Function, vshaderLocation: string, fshaderLocation: string) : void</text><ellipse cx="18" cy="494.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="255" x="27" y="498.0059">registerItem(key: string, constr: Function) : void</text><ellipse cx="18" cy="507.3262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="215" x="27" y="510.9609">set(key: string, value: ShaderType) : void</text><ellipse cx="18" cy="520.2813" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="92" x="27" y="523.916">toString() : string</text><!--MD5=[89bf1c8003c0effeda5076de74e2aed3]
class Registry<ShaderType>--><rect codeLine="25" fill="#FEFECE" filter="url(#f1hec2o81ik2cs)" height="195.4609" id="Registry&lt;ShaderType&gt;" style="stroke:#FF0000;stroke-width:1.5;" width="304" x="158.5" y="7"/><ellipse cx="238.75" cy="23" fill="#A9DCDF" rx="11" ry="11" style="stroke:#FF0000;stroke-width:1.0;"/><path d="M238.6133,18.3481 L237.4595,23.4199 L239.7754,23.4199 Z M237.1191,16.1069 L240.1157,16.1069 L243.4609,28.5 L241.0122,28.5 L240.2485,25.437 L236.9697,25.437 L236.2227,28.5 L233.7739,28.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="135" x="259.25" y="27.5352">Registry&lt;ShaderType&gt;</text><line style="stroke:#FF0000;stroke-width:1.5;" x1="159.5" x2="461.5" y1="39" y2="39"/><ellipse cx="169.5" cy="50" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="219" x="178.5" y="53.6348">add(key: string, value: ShaderType) : void</text><ellipse cx="169.5" cy="62.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="66" x="178.5" y="66.5898">clear() : void</text><ellipse cx="169.5" cy="75.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="178.5" y="79.5449">delete(key: string) : void</text><ellipse cx="169.5" cy="88.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="158" x="178.5" y="92.5">forEach(func: Function) : void</text><ellipse cx="169.5" cy="101.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="153" x="178.5" y="105.4551">get(key: string) : ShaderType</text><ellipse cx="169.5" cy="114.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="178.5" y="118.4102">has(key: string) : boolean</text><ellipse cx="169.5" cy="127.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="81" x="178.5" y="131.3652">keys() : string[]</text><ellipse cx="169.5" cy="140.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="81" x="178.5" y="144.3203">preload() : void</text><ellipse cx="169.5" cy="153.6406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="278" x="178.5" y="157.2754">registerAndPreloadItem(key: string, args: any) : void</text><ellipse cx="169.5" cy="166.5957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="216" x="178.5" y="170.2305">registerItem(key: string, args: any) : void</text><ellipse cx="169.5" cy="179.5508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="215" x="178.5" y="183.1855">set(key: string, value: ShaderType) : void</text><ellipse cx="169.5" cy="192.5059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="92" x="178.5" y="196.1406">toString() : string</text><!--MD5=[165df857089a18fa297a101ebeae1484]
reverse link Registry<ShaderType> to ShaderRegistry--><path codeLine="39" d="M310.5,222.43 C310.5,235.45 310.5,248.78 310.5,261.97 " fill="none" id="Registry&lt;ShaderType&gt;-backto-ShaderRegistry" style="stroke:#FF0000;stroke-width:1.0;"/><polygon fill="none" points="303.5,222.3,310.5,202.3,317.5,222.3,303.5,222.3" style="stroke:#FF0000;stroke-width:1.0;"/><!--MD5=[352b037734cceb4ded6e474f1324310d]
@startuml
skinparam ClassArrowColor #ff0000
skinparam ClassBorderColor #ff0000
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
class "ShaderRegistry" {
    {static} +LABEL_SHADER : string
    {static} +POINT_SHADER : string
    {static} +RECT_SHADER : string
    {static} +SPRITE_SHADER : string
    -registryItems : ShaderRegistryItem[]
    +add(key: string, value: ShaderType) : void
    +clear() : void
    +delete(key: string) : void
    +forEach(func: Function) : void
    +get(key: string) : ShaderType
    +has(key: string) : boolean
    +keys() : string[]
    +preload() : void
    +registerAndPreloadItem(key: string, constr: Function, vshaderLocation: string, fshaderLocation: string) : void
    +registerItem(key: string, constr: Function) : void
    +set(key: string, value: ShaderType) : void
    +toString() : string
}
abstract class "Registry<ShaderType>" {
    +add(key: string, value: ShaderType) : void
    +clear() : void
    +delete(key: string) : void
    +forEach(func: Function) : void
    +get(key: string) : ShaderType
    +has(key: string) : boolean
    +keys() : string[]
    {abstract} +preload() : void
    {abstract} +registerAndPreloadItem(key: string, args: any) : void
    {abstract} +registerItem(key: string, args: any) : void
    +set(key: string, value: ShaderType) : void
    +toString() : string
}
"Registry<ShaderType>" <|- - "ShaderRegistry"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 11:46:50 EST 2021)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>